def <BUILTIN>:INTRINSICS.ReferenceError(
  this: ESValue,
  ArgumentsList: List[ESValue],
  NewTarget: Record[Constructor] | Undefined,
): Unknown = {
  let __args__ = (record)
  if (< 0 (sizeof ArgumentsList)) {
    pop message < ArgumentsList
    expand __args__.message
  } else let message = undefined
  if (< 0 (sizeof ArgumentsList)) {
    pop options < ArgumentsList
    expand __args__.options
  } else let options = undefined
  if (= NewTarget undefined) {
    let newTarget = @EXECUTION_STACK[0].Function
  } else {
    let newTarget = NewTarget
  }
  call %0 = clo<"OrdinaryCreateFromConstructor">(newTarget, "%ReferenceError.prototype%", (list ["ErrorData"]))
  assert (? %0: Completion)
  if (? %0: Abrupt) return %0
  else %0 = %0.Value
  let O = %0
  %1 = (exists __args__.message)
  if %1 {
    call %2 = clo<"ToString">(message)
    assert (? %2: Completion)
    if (? %2: Abrupt) return %2
    else %2 = %2.Value
    let msg = %2
    call %3 = clo<"CreateNonEnumerableDataPropertyOrThrow">(O, "message", msg)
  }
  call %4 = clo<"InstallErrorCause">(O, options)
  assert (? %4: Completion)
  if (? %4: Abrupt) return %4
  else %4 = %4.Value
  call %5 = clo<"NormalCompletion">(O)
  return %5
}

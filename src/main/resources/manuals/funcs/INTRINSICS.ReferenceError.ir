def <BUILTIN>:INTRINSICS.ReferenceError(
  this: ESValue,
  ArgumentsList: List[ESValue],
  NewTarget: Record[Object] | Undefined,
): Unknown = {
  let __args__ = (record)
  if (< 0 ArgumentsList.length) {
    pop message < ArgumentsList
    expand __args__.message
  } else let message = undefined
  if (< 0 ArgumentsList.length) {
    pop options < ArgumentsList
    expand __args__.options
  } else let options = undefined
  %0 = (= NewTarget undefined)
  if %0 {
    let newTarget = @EXECUTION_STACK[0].Function
  } else {
    let newTarget = NewTarget
  }
  call %1 = clo<"OrdinaryCreateFromConstructor">(newTarget, "%ReferenceError.prototype%", (list ["ErrorData"]))
  assert (? %1: Completion)
  if (? %1: Abrupt) return %1
  else %1 = %1.Value
  let O = %1
  %2 = (exists __args__.message)
  if %2 {
    call %3 = clo<"ToString">(message)
    assert (? %3: Completion)
    if (? %3: Abrupt) return %3
    else %3 = %3.Value
    let msg = %3
    call %4 = clo<"CreateNonEnumerableDataPropertyOrThrow">(O, "message", msg)
  }
  call %5 = clo<"InstallErrorCause">(O, options)
  assert (? %5: Completion)
  if (? %5: Abrupt) return %5
  else %5 = %5.Value
  call %6 = clo<"NormalCompletion">(O)
  return %6
}

def ToObject(
  argument: ESValue,
): Normal[Record[Object]] | Abrupt[throw] = {
  let intrinsics = @EXECUTION_STACK[0].Realm.Intrinsics
  if (= (typeof argument) @Undefined) {
    call %0 = clo<"__NEW_ERROR_OBJ__">("%TypeError.prototype%")
    call %1 = clo<"ThrowCompletion">(%0)
    return %1
  }
  if (= (typeof argument) @Null) {
    call %2 = clo<"__NEW_ERROR_OBJ__">("%TypeError.prototype%")
    call %3 = clo<"ThrowCompletion">(%2)
    return %3
  }
  if (= (typeof argument) @Boolean) {
    call %4 = clo<"__NEW_OBJ__">()
    %4.Prototype = intrinsics["%Boolean.prototype%"]
    %4.BooleanData = argument
    %4.Extensible = true
    call %5 = clo<"NormalCompletion">(%4)
    return %5
  }
  if (= (typeof argument) @Number) {
    call %6 = clo<"__NEW_OBJ__">()
    %6.Prototype = intrinsics["%Number.prototype%"]
    %6.NumberData = argument
    %6.Extensible = true
    call %7 = clo<"NormalCompletion">(%6)
    return %7
  }
  if (= (typeof argument) @String) {
    call %8 = clo<"__NEW_OBJ__">()
    %8.GetOwnProperty = clo<"Record[StringExoticObject].GetOwnProperty">
    %8.DefineOwnProperty = clo<"Record[StringExoticObject].DefineOwnProperty">
    %8.OwnPropertyKeys = clo<"Record[StringExoticObject].OwnPropertyKeys">
    %8.Prototype = intrinsics["%String.prototype%"]
    %8.StringData = argument
    %8.Extensible = true
    %8.__MAP__.length = (record [PropertyDescriptor] {
      "Value" : ([number] (sizeof argument)),
      "Writable" : false,
      "Enumerable" : false,
      "Configurable" : false,
    })
    call %9 = clo<"NormalCompletion">(%8)
    return %9
  }
  if (= (typeof argument) @Symbol) {
    call %10 = clo<"__NEW_OBJ__">()
    %10.Prototype = intrinsics["%Symbol.prototype%"]
    %10.SymbolData = argument
    %10.Extensible = true
    call %11 = clo<"NormalCompletion">(%10)
    return %11
  }
  if (= (typeof argument) @BigInt) {
    call %12 = clo<"__NEW_OBJ__">()
    %12.Prototype = intrinsics["%BigInt.prototype%"]
    %12.BigIntData = argument
    %12.Extensible = true
    call %13 = clo<"NormalCompletion">(%12)
    return %13
  }
  if (= (typeof argument) @Object) {
    call %14 = clo<"NormalCompletion">(argument)
    return %14
  }
}

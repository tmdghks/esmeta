def IsInTailPosition(
  call: Ast[CallExpression | MemberExpression | OptionalChain],
): Boolean = {
  // If the source text matched by _call_ is non-strict code, return *false*.
  if false return false

  // If _call_ is not contained within a |FunctionBody|, |ConciseBody|, or |AsyncConciseBody|, return *false*.
  // Let _body_ be the |FunctionBody|, |ConciseBody|, or |AsyncConciseBody| that most closely contains _call_.
  %0 = call
  %1 = (? %0: Ast[FunctionBody | ConciseBody | AsyncConciseBody])
  while (&& (! %1) (exists %0.parent)) {
    %0 = %0.parent
    %1 = (? %0: Ast[FunctionBody | ConciseBody | AsyncConciseBody])
  }
  if (! %1) return false
  let body = %0

  // If _body_ is the |FunctionBody| of a |GeneratorBody|, return *false*.
  // If _body_ is the |FunctionBody| of an |AsyncFunctionBody|, return *false*.
  // If _body_ is the |FunctionBody| of an |AsyncGeneratorBody|, return *false*.
  if (exists body.parent) {
    if (&& (? body: Ast[FunctionBody]) (? body.parent: Ast[GeneratorBody])) return false
    if (&& (? body: Ast[FunctionBody]) (? body.parent: Ast[AsyncFunctionBody])) return false
    if (&& (? body: Ast[FunctionBody]) (? body.parent: Ast[AsyncGeneratorBody])) return false
  }

  // If body is an |AsyncConciseBody|, return false.
  if (? body: Ast[AsyncConciseBody]) return false

  // Return the result of HasCallInTailPosition of _body_ with argument _call_.
  sdo-call %2 = body->HasCallInTailPosition(call)
  return %2
}

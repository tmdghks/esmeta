def ToBigInt(
  argument: ESValue,
): Normal[BigInt] | Abrupt[throw] = {
  call %0 = clo<"ToPrimitive">(argument, ~number~)
  assert (? %0: Completion)
  if (? %0: Abrupt) return %0
  else %0 = %0.Value
  let prim = %0
  if (= (typeof prim) @Undefined) {
    call %1 = clo<"__NEW_ERROR_OBJ__">("%TypeError.prototype%")
    call %2 = clo<"ThrowCompletion">(%1)
    return %2
  }
  if (= (typeof prim) @Null) {
    call %3 = clo<"__NEW_ERROR_OBJ__">("%TypeError.prototype%")
    call %4 = clo<"ThrowCompletion">(%3)
    return %4
  }
  if (= (typeof prim) @Boolean) {
    if prim {
      call %5 = clo<"NormalCompletion">(1n)
      return %5
    } else {
      call %6 = clo<"NormalCompletion">(0n)
      return %6
    }
  }
  if (= (typeof prim) @BigInt) {
    call %7 = clo<"NormalCompletion">(prim)
    return %7
  }
  if (= (typeof prim) @Number) {
    call %8 = clo<"__NEW_ERROR_OBJ__">("%TypeError.prototype%")
    call %9 = clo<"ThrowCompletion">(%8)
    return %9
  }
  if (= (typeof prim) @String) {
    call %10 = clo<"StringToBigInt">(prim)
    let n = %10
    if (= n undefined) {
      call %11 = clo<"__NEW_ERROR_OBJ__">("%SyntaxError.prototype%")
      call %12 = clo<"ThrowCompletion">(%11)
      return %12
    }
    call %13 = clo<"NormalCompletion">(n)
    return %13
  }
  if (= (typeof prim) @Symbol) {
    call %14 = clo<"__NEW_ERROR_OBJ__">("%TypeError.prototype%")
    call %15 = clo<"ThrowCompletion">(%14)
    return %15
  }
  assert false
}

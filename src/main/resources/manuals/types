type AgentRecord {
  CanBlock: Boolean;
  CandidateExecution: Record[CandidateExecutionRecord];
  IsLockFree1: Boolean;
  IsLockFree2: Boolean;
  IsLockFree8: Boolean;
  KeptAlive: List[Record[Object | Symbol]];
  LittleEndian: Boolean;
  Signifier: Record[AgentSignifier];
}

type ArgumentsExoticObject extends Object {
  DefineOwnProperty: Clo["Record[ArgumentsExoticObject].DefineOwnProperty"];
  Delete: Clo["Record[ArgumentsExoticObject].Delete"];
  Get: Clo["Record[ArgumentsExoticObject].Get"];
  GetOwnProperty: Clo["Record[ArgumentsExoticObject].GetOwnProperty"];
  Set: Clo["Record[ArgumentsExoticObject].Set"];
  ParameterMap: Record[OrdinaryObject];
}

type ArrayBufferObject extends Object {
  ArrayBufferByteLength: NonNegInt;
  ArrayBufferData: Record[SharedDataBlock] | Null;
  ArrayBufferDetachKey: ESValue;
}

type ArrayExoticObject extends Object {
  DefineOwnProperty: Clo["Record[ArrayExoticObject].DefineOwnProperty"];
}

type AsyncFromSyncIteratorInstance extends OrdinaryObject {
  SyncIteratorRecord: Record[IteratorRecord];
}

type AsyncGeneratorInstance extends OrdinaryObject {
  AsyncGeneratorContext: Record[ExecutionContext];
  AsyncGeneratorQueue: List[Record[AsyncGeneratorRequestRecord]];
  AsyncGeneratorState: Enum[~awaitingDASHreturn~, ~completed~, ~executing~, ~suspendedStart~, ~suspendedYield~] | Undefined;
  GeneratorBrand: Enum[~empty~] | String;
}

type AsyncGeneratorRequestRecord {
  Capability: Record[PromiseCapabilityRecord];
}

type BigIntObject extends OrdinaryObject {
  BigIntData: BigInt;
}

type Binding {
  BoundValue: ESValue;
  initialized: Boolean;
}

type BooleanObject extends OrdinaryObject {
  BooleanData: Boolean;
}

type BoundFunctionExoticObject extends Constructor {
  Call: Clo["Record[BoundFunctionExoticObject].Call"];
  Construct: Clo["Record[BoundFunctionExoticObject].Construct"];
  BoundArguments: List[ESValue];
  BoundTargetFunction: Record[FunctionObject];
  BoundThis: ESValue;
}

type BuiltinFunctionObject extends Constructor {
  Call: Clo["Record[BuiltinFunctionObject].Call"];
  Code: Clo;
  InitialName: String | Null;
  Realm: Record[RealmRecord];
}

type ClassFieldDefinitionRecord {
  Initializer: Record[FunctionObject] | Enum[~empty~];
  Name: Record[PrivateName | Symbol] | String;
}

type ClassStaticBlockDefinitionRecord {
  BodyFunction: Record[FunctionObject];
}

type Constructor extends FunctionObject

type CyclicModuleRecord extends ModuleRecord {
  Evaluate: Clo["CyclicModuleRecord.Evaluate"];
  Link: Clo["CyclicModuleRecord.Link"];
  AsyncEvaluation: Boolean;
  AsyncParentModules: List[Record[CyclicModuleRecord]];
  CycleRoot: Record[CyclicModuleRecord] | Enum[~empty~];
  DFSAncestorIndex: Enum[~empty~] | Int;
  DFSIndex: Enum[~empty~] | Int;
  EvaluationError: Abrupt[throw] | Enum[~empty~];
  HasTLA: Boolean;
  PendingAsyncDependencies: Enum[~empty~] | Int;
  RequestedModules: List[String];
  Status: Enum[~evaluated~, ~evaluating-async~, ~evaluating~, ~linked~, ~linking~, ~unlinked~];
  TopLevelCapability: Record[PromiseCapabilityRecord] | Enum[~empty~];
}

type DeclarativeEnvironmentRecord extends EnvironmentRecord {
  CreateImmutableBinding: Clo["Record[DeclarativeEnvironmentRecord].CreateImmutableBinding"];
  CreateMutableBinding: Clo["Record[DeclarativeEnvironmentRecord].CreateMutableBinding"];
  DeleteBinding: Clo["Record[DeclarativeEnvironmentRecord].DeleteBinding"];
  GetBindingValue: Clo["Record[DeclarativeEnvironmentRecord].GetBindingValue"];
  HasBinding: Clo["Record[DeclarativeEnvironmentRecord].HasBinding"];
  HasSuperBinding: Clo["Record[DeclarativeEnvironmentRecord].HasSuperBinding"];
  HasThisBinding: Clo["Record[DeclarativeEnvironmentRecord].HasThisBinding"];
  InitializeBinding: Clo["Record[DeclarativeEnvironmentRecord].InitializeBinding"];
  SetMutableBinding: Clo["Record[DeclarativeEnvironmentRecord].SetMutableBinding"];
  WithBaseObject: Clo["Record[DeclarativeEnvironmentRecord].WithBaseObject"];
}

type ECMAScriptFunctionObject extends Constructor {
  Call: Clo["Record[ECMAScriptFunctionObject].Call"];
  Construct: Clo["Record[ECMAScriptFunctionObject].Construct"];
  ClassFieldInitializerName: Record[PrivateName | Symbol] | Enum[~empty~] | String;
  ConstructorKind: Enum[~base~, ~derived~];
  ECMAScriptCode: Ast;
  Environment: Record[EnvironmentRecord];
  Fields: List[Record[ClassFieldDefinitionRecord]];
  FormalParameters: Ast;
  HomeObject: Record[Object] | Undefined;
  IsClassConstructor: Boolean;
  PrivateEnvironment: Record[PrivateEnvironmentRecord] | Null;
  PrivateMethods: List[Record[PrivateElement]];
  Realm: Record[RealmRecord];
  ScriptOrModule: Record[ModuleRecord | ScriptRecord] | Null;
  SourceText: String;
  Strict: Boolean;
  ThisMode: Enum[~global~, ~lexical~, ~strict~];
}

type EnvironmentRecord {
  Map: Map[String |-> Record[Binding]];
  OuterEnv: Record[EnvironmentRecord] | Null;
}

type ErrorInstance extends OrdinaryObject {
  ErrorData: Undefined;
}

type ExecutionContext {
  Function: Record[FunctionObject] | Null;
  Generator: Record[Object];
  LexicalEnvironment: Record[EnvironmentRecord];
  PrivateEnvironment: Record[PrivateEnvironmentRecord] | Null;
  Realm: Record[RealmRecord];
  ScriptOrModule: Record[ModuleRecord | ScriptRecord] | Null;
  VariableEnvironment: Record[EnvironmentRecord];
}

type ExportEntryRecord {
  ExportName: String | Null;
  ImportName: Enum[~all-but-default~, ~all~] | String | Null;
  LocalName: String | Null;
  ModuleRequest: String | Null;
}

type ForInIteratorInstance extends OrdinaryObject {
  Object: Record[Object];
  ObjectWasVisited: Boolean;
  RemainingKeys: List[String];
  VisitedKeys: List[String];
}

type FunctionEnvironmentRecord extends DeclarativeEnvironmentRecord {
  BindThisValue: Clo["Record[FunctionEnvironmentRecord].BindThisValue"];
  GetSuperBase: Clo["Record[FunctionEnvironmentRecord].GetSuperBase"];
  GetThisBinding: Clo["Record[FunctionEnvironmentRecord].GetThisBinding"];
  HasSuperBinding: Clo["Record[FunctionEnvironmentRecord].HasSuperBinding"];
  HasThisBinding: Clo["Record[FunctionEnvironmentRecord].HasThisBinding"];
  FunctionObject: Record[FunctionObject];
  NewTarget: Record[Object] | Undefined;
  ThisBindingStatus: Enum[~initialized~, ~lexical~, ~uninitialized~];
  ThisValue: ESValue;
}

type FunctionObject extends OrdinaryObject

type GeneratorInstance extends OrdinaryObject {
  GeneratorBrand: Enum[~empty~] | String;
  GeneratorContext: Record[ExecutionContext];
  GeneratorState: Enum[~completed~, ~executing~, ~suspendedStart~, ~suspendedYield~] | Undefined;
}

type GlobalEnvironmentRecord extends EnvironmentRecord {
  CanDeclareGlobalFunction: Clo["Record[GlobalEnvironmentRecord].CanDeclareGlobalFunction"];
  CanDeclareGlobalVar: Clo["Record[GlobalEnvironmentRecord].CanDeclareGlobalVar"];
  CreateGlobalFunctionBinding: Clo["Record[GlobalEnvironmentRecord].CreateGlobalFunctionBinding"];
  CreateGlobalVarBinding: Clo["Record[GlobalEnvironmentRecord].CreateGlobalVarBinding"];
  CreateImmutableBinding: Clo["Record[GlobalEnvironmentRecord].CreateImmutableBinding"];
  CreateMutableBinding: Clo["Record[GlobalEnvironmentRecord].CreateMutableBinding"];
  DeleteBinding: Clo["Record[GlobalEnvironmentRecord].DeleteBinding"];
  GetBindingValue: Clo["Record[GlobalEnvironmentRecord].GetBindingValue"];
  GetThisBinding: Clo["Record[GlobalEnvironmentRecord].GetThisBinding"];
  HasBinding: Clo["Record[GlobalEnvironmentRecord].HasBinding"];
  HasLexicalDeclaration: Clo["Record[GlobalEnvironmentRecord].HasLexicalDeclaration"];
  HasRestrictedGlobalProperty: Clo["Record[GlobalEnvironmentRecord].HasRestrictedGlobalProperty"];
  HasSuperBinding: Clo["Record[GlobalEnvironmentRecord].HasSuperBinding"];
  HasThisBinding: Clo["Record[GlobalEnvironmentRecord].HasThisBinding"];
  HasVarDeclaration: Clo["Record[GlobalEnvironmentRecord].HasVarDeclaration"];
  InitializeBinding: Clo["Record[GlobalEnvironmentRecord].InitializeBinding"];
  SetMutableBinding: Clo["Record[GlobalEnvironmentRecord].SetMutableBinding"];
  WithBaseObject: Clo["Record[GlobalEnvironmentRecord].WithBaseObject"];
  DeclarativeRecord: Record[DeclarativeEnvironmentRecord];
  GlobalThisValue: Record[Object];
  ObjectRecord: Record[ObjectEnvironmentRecord];
  VarNames: List[String];
}

type GlobalSymbolRegistryRecord {
  Key: String;
  Symbol: Record[Symbol];
}

type ImmutableBinding extends Binding {
  strict: Boolean;
}

type ImmutablePrototypeExoticObject extends Object {
  SetPrototypeOf: Clo["Record[ImmutablePrototypeExoticObject].SetPrototypeOf"];
}

type ImportEntryRecord {
  ImportName: Enum[~namespace-object~] | String;
  LocalName: String;
  ModuleRequest: String;
}

type IntegerIndexedExoticObject extends Object {
  DefineOwnProperty: Clo["Record[IntegerIndexedExoticObject].DefineOwnProperty"];
  Delete: Clo["Record[IntegerIndexedExoticObject].Delete"];
  Get: Clo["Record[IntegerIndexedExoticObject].Get"];
  GetOwnProperty: Clo["Record[IntegerIndexedExoticObject].GetOwnProperty"];
  HasProperty: Clo["Record[IntegerIndexedExoticObject].HasProperty"];
  OwnPropertyKeys: Clo["Record[IntegerIndexedExoticObject].OwnPropertyKeys"];
  Set: Clo["Record[IntegerIndexedExoticObject].Set"];
  ArrayLength: NonNegInt;
  ByteOffset: NonNegInt;
  ContentType: Enum[~BigInt~, ~Number~];
  TypedArrayName: String;
  ViewedArrayBuffer: Record[ArrayBufferObject];
}

type Intrinsics

type IteratorRecord {
  Done: Boolean;
  Iterator: Record[OrdinaryObject];
  NextMethod: Record[FunctionObject];
}

type JobCallbackRecord {
  Callback: Record[FunctionObject];
  HostDefined: Enum[~empty~];
}

type MapInstance extends OrdinaryObject {
  MapData: List[Record[{ Key: ESValue | Enum[~empty~], Value: ESValue }]];
}

type MatchRecord {
  EndIndex: Int;
  StartIndex: Int;
}

type ModuleEnvironmentRecord extends DeclarativeEnvironmentRecord {
  CreateImportBinding: Clo["Record[ModuleEnvironmentRecord].CreateImportBinding"];
  GetBindingValue: Clo["Record[ModuleEnvironmentRecord].GetBindingValue"];
  GetThisBinding: Clo["Record[ModuleEnvironmentRecord].GetThisBinding"];
  HasThisBinding: Clo["Record[ModuleEnvironmentRecord].HasThisBinding"];
}

type ModuleNamespaceExoticObject extends Object {
  DefineOwnProperty: Clo["Record[ModuleNamespaceExoticObject].DefineOwnProperty"];
  Delete: Clo["Record[ModuleNamespaceExoticObject].Delete"];
  Get: Clo["Record[ModuleNamespaceExoticObject].Get"];
  GetOwnProperty: Clo["Record[ModuleNamespaceExoticObject].GetOwnProperty"];
  GetPrototypeOf: Clo["Record[ModuleNamespaceExoticObject].GetPrototypeOf"];
  HasProperty: Clo["Record[ModuleNamespaceExoticObject].HasProperty"];
  IsExtensible: Clo["Record[ModuleNamespaceExoticObject].IsExtensible"];
  OwnPropertyKeys: Clo["Record[ModuleNamespaceExoticObject].OwnPropertyKeys"];
  PreventExtensions: Clo["Record[ModuleNamespaceExoticObject].PreventExtensions"];
  Set: Clo["Record[ModuleNamespaceExoticObject].Set"];
  SetPrototypeOf: Clo["Record[ModuleNamespaceExoticObject].SetPrototypeOf"];
  Exports: List[String];
  Module: Record[ModuleRecord];
}

type ModuleRecord {
  Environment: Record[ModuleEnvironmentRecord] | Enum[~empty~];
  HostDefined: Undefined;
  Namespace: Record[ModuleNamespaceExoticObject] | Enum[~empty~];
  Realm: Record[RealmRecord];
}

type MutableBinding extends Binding

type NumberObject extends OrdinaryObject {
  NumberData: Number;
}

type Object {
  DefineOwnProperty: Clo["Record[OrdinaryObject].DefineOwnProperty"];
  Delete: Clo["Record[OrdinaryObject].Delete"];
  Get: Clo["Record[OrdinaryObject].Get"];
  GetOwnProperty: Clo["Record[OrdinaryObject].GetOwnProperty"];
  GetPrototypeOf: Clo["Record[OrdinaryObject].GetPrototypeOf"];
  HasProperty: Clo["Record[OrdinaryObject].HasProperty"];
  IsExtensible: Clo["Record[OrdinaryObject].IsExtensible"];
  OwnPropertyKeys: Clo["Record[OrdinaryObject].OwnPropertyKeys"];
  PreventExtensions: Clo["Record[OrdinaryObject].PreventExtensions"];
  Set: Clo["Record[OrdinaryObject].Set"];
  SetPrototypeOf: Clo["Record[OrdinaryObject].SetPrototypeOf"];
  Extensible: Boolean;
  Map: Map[Record[Symbol] | String |-> Record[PropertyDescriptor]];
  PrivateElements: List[Record[PrivateElement]];
  Prototype: Record[Object] | Null;
}

type ObjectEnvironmentRecord extends EnvironmentRecord {
  CreateMutableBinding: Clo["Record[ObjectEnvironmentRecord].CreateMutableBinding"];
  DeleteBinding: Clo["Record[ObjectEnvironmentRecord].DeleteBinding"];
  GetBindingValue: Clo["Record[ObjectEnvironmentRecord].GetBindingValue"];
  HasBinding: Clo["Record[ObjectEnvironmentRecord].HasBinding"];
  HasSuperBinding: Clo["Record[ObjectEnvironmentRecord].HasSuperBinding"];
  HasThisBinding: Clo["Record[ObjectEnvironmentRecord].HasThisBinding"];
  InitializeBinding: Clo["Record[ObjectEnvironmentRecord].InitializeBinding"];
  SetMutableBinding: Clo["Record[ObjectEnvironmentRecord].SetMutableBinding"];
  WithBaseObject: Clo["Record[ObjectEnvironmentRecord].WithBaseObject"];
  BindingObject: Record[Object];
  IsWithEnvironment: Boolean;
}

type OrdinaryObject extends Object

type PendingJob {
  Job: Clo;
  Realm: Record[RealmRecord];
  ScriptOrModule: Record[ModuleRecord | ScriptRecord] | Null;
}

type PrivateElement {
  Get: Record[FunctionObject] | Undefined | Absent;
  Key: Record[PrivateName];
  Kind: Enum[~accessor~, ~field~, ~method~];
  Set: Record[FunctionObject] | Undefined | Absent;
  Value: ESValue | Absent;
}

type PrivateEnvironmentRecord {
  Names: List[Record[PrivateName]];
  OuterPrivateEnvironment: Record[PrivateEnvironmentRecord] | Null;
}

type PrivateName {
  Description: String;
}

type Promise extends OrdinaryObject {
  PromiseFulfillReactions: List[Record[PromiseReaction]];
  PromiseIsHandled: Boolean;
  PromiseRejectReactions: List[Record[PromiseReaction]];
  PromiseResult: ESValue;
  PromiseState: Enum[~fulfilled~, ~pending~, ~rejected~];
}

type PromiseCapabilityRecord {
  Promise: Record[Promise];
  Reject: Record[FunctionObject];
  Resolve: Record[FunctionObject];
}

type PromiseReaction {
  Capability: Record[PromiseCapabilityRecord] | Undefined;
  Handler: Record[JobCallbackRecord] | Enum[~empty~];
  Type: Enum[~Fulfill~, ~Reject~];
}

type PropertyDescriptor {
  Configurable: Boolean | Absent;
  Enumerable: Boolean | Absent;
  Get: Record[FunctionObject] | Undefined | Absent;
  Set: Record[FunctionObject] | Undefined | Absent;
  Value: ESValue | Absent;
  Writable: Boolean | Absent;
}

type ProxyExoticObject extends Constructor {
  Call: Clo["Record[ProxyExoticObject].Call"];
  Construct: Clo["Record[ProxyExoticObject].Construct"];
  DefineOwnProperty: Clo["Record[ProxyExoticObject].DefineOwnProperty"];
  Delete: Clo["Record[ProxyExoticObject].Delete"];
  Get: Clo["Record[ProxyExoticObject].Get"];
  GetOwnProperty: Clo["Record[ProxyExoticObject].GetOwnProperty"];
  GetPrototypeOf: Clo["Record[ProxyExoticObject].GetPrototypeOf"];
  HasProperty: Clo["Record[ProxyExoticObject].HasProperty"];
  IsExtensible: Clo["Record[ProxyExoticObject].IsExtensible"];
  OwnPropertyKeys: Clo["Record[ProxyExoticObject].OwnPropertyKeys"];
  PreventExtensions: Clo["Record[ProxyExoticObject].PreventExtensions"];
  Set: Clo["Record[ProxyExoticObject].Set"];
  SetPrototypeOf: Clo["Record[ProxyExoticObject].SetPrototypeOf"];
  ProxyHandler: Record[Object] | Null;
  ProxyTarget: Record[Object] | Null;
}

type RealmRecord {
  GlobalEnv: Record[GlobalEnvironmentRecord];
  GlobalObject: Record[Object] | Undefined;
  HostDefined: Undefined;
  Intrinsics: Record[Intrinsics];
  TemplateMap: List[Record[TemplatePair]];
}

type ReferenceRecord {
  Base: ESValue | Record[EnvironmentRecord] | Enum[~unresolvable~];
  ReferencedName: Record[PrivateName | Symbol] | String;
  Strict: Boolean;
  ThisValue: ESValue | Enum[~empty~];
}

type RegExpObject extends Object {
  RegExpMatcher: Clo;
}

type ResolvedBindingRecord {
  BindingName: Enum[~NAMESPACE~] | String;
  Module: Record[ModuleRecord];
}

type ScriptRecord {
  ECMAScriptCode: Ast[Script];
  HostDefined: Enum[~empty~];
  Realm: Record[RealmRecord] | Undefined;
}

type SetInstance extends OrdinaryObject {
  SetData: List[ESValue];
}

type SourceTextModuleRecord extends CyclicModuleRecord {
  ExecuteModule: Clo["SourceTextModuleRecord.ExecuteModule"];
  GetExportedNames: Clo["SourceTextModuleRecord.GetExportedNames"];
  InitializeEnvironment: Clo["SourceTextModuleRecord.InitializeEnvironment"];
  ResolveExport: Clo["SourceTextModuleRecord.ResolveExport"];
  Context: Record[ExecutionContext];
  ECMAScriptCode: Ast[Module];
  ImportEntries: List[Record[ImportEntryRecord]];
  ImportMeta: Record[Object] | Enum[~empty~];
  IndirectExportEntries: List[Record[ExportEntryRecord]];
  LocalExportEntries: List[Record[ExportEntryRecord]];
  StarExportEntries: List[Record[ExportEntryRecord]];
}

type StringExoticObject extends Object {
  DefineOwnProperty: Clo["Record[StringExoticObject].DefineOwnProperty"];
  GetOwnProperty: Clo["Record[StringExoticObject].GetOwnProperty"];
  OwnPropertyKeys: Clo["Record[StringExoticObject].OwnPropertyKeys"];
  StringData: String;
}

type Symbol {
  Description: String | Undefined;
}

type SymbolObject extends OrdinaryObject {
  SymbolData: Record[Symbol];
}

type TemplatePair {
  Array: Record[ArrayExoticObject];
  Site: Ast[TemplateLiteral];
}

type WeakMapInstance extends OrdinaryObject {
  WeakMapData: List[Record[{ Key: ESValue | Enum[~empty~], Value: ESValue }]];
}

type WeakSetInstance extends OrdinaryObject {
  WeakSetData: List[ESValue];
}

type AgentRecord {
  CanBlock: Boolean;
  CandidateExecution: Record[CandidateExecutionRecord];
  IsLockFree1: Boolean;
  IsLockFree2: Boolean;
  IsLockFree8: Boolean;
  KeptAlive: List[Record[Object | Symbol]];
  LittleEndian: Boolean;
  Signifier: Record[AgentSignifier];
}

type ArgumentsExoticObject extends Object {
  def DefineOwnProperty = Record[ArgumentsExoticObject].DefineOwnProperty;
  def Delete = Record[ArgumentsExoticObject].Delete;
  def Get = Record[ArgumentsExoticObject].Get;
  def GetOwnProperty = Record[ArgumentsExoticObject].GetOwnProperty;
  def Set = Record[ArgumentsExoticObject].Set;
  ParameterMap: Record[OrdinaryObject];
}

type ArrayBufferObject extends Object {
  ArrayBufferByteLength: NonNegInt;
  ArrayBufferData: Record[SharedDataBlock] | Null;
  ArrayBufferDetachKey: ESValue;
}

type ArrayExoticObject extends Object {
  def DefineOwnProperty = Record[ArrayExoticObject].DefineOwnProperty;
}

type AsyncFromSyncIteratorInstance extends OrdinaryObject {
  SyncIteratorRecord: Record[IteratorRecord];
}

type AsyncGeneratorInstance extends OrdinaryObject {
  AsyncGeneratorContext: Record[ExecutionContext];
  AsyncGeneratorQueue: List[Record[AsyncGeneratorRequestRecord]];
  AsyncGeneratorState: Enum[~awaitingDASHreturn~, ~completed~, ~executing~, ~suspendedStart~, ~suspendedYield~] | Undefined;
  GeneratorBrand: Enum[~empty~] | String;
}

type AsyncGeneratorRequestRecord {
  Capability: Record[PromiseCapabilityRecord];
}

type BigIntObject extends OrdinaryObject {
  BigIntData: BigInt;
}

type Binding {
  BoundValue: ESValue;
  initialized: Boolean;
  mutable: Boolean;
}

type BooleanObject extends OrdinaryObject {
  BooleanData: Boolean;
}

type BoundFunctionExoticObject extends Constructor {
  def Call = Record[BoundFunctionExoticObject].Call;
  def Construct = Record[BoundFunctionExoticObject].Construct;
  BoundArguments: List[ESValue];
  BoundTargetFunction: Record[FunctionObject];
  BoundThis: ESValue;
}

type BuiltinFunctionObject extends Constructor {
  def Call = Record[BuiltinFunctionObject].Call;
  def Code;
  InitialName: String | Null;
  Realm: Record[RealmRecord];
}

type ClassFieldDefinitionRecord {
  Initializer: Record[FunctionObject] | Enum[~empty~];
  Name: Record[PrivateName | Symbol] | String;
}

type ClassStaticBlockDefinitionRecord {
  BodyFunction: Record[FunctionObject];
}

type Constructor extends FunctionObject

type CyclicModuleRecord extends ModuleRecord {
  def Evaluate = CyclicModuleRecord.Evaluate;
  def Link = CyclicModuleRecord.Link;
  AsyncEvaluation: Boolean;
  AsyncParentModules: List[Record[CyclicModuleRecord]];
  CycleRoot: Record[CyclicModuleRecord] | Enum[~empty~];
  DFSAncestorIndex: Enum[~empty~] | Int;
  DFSIndex: Enum[~empty~] | Int;
  EvaluationError: Abrupt[throw] | Enum[~empty~];
  HasTLA: Boolean;
  PendingAsyncDependencies: Enum[~empty~] | Int;
  RequestedModules: List[String];
  Status: Enum[~evaluated~, ~evaluating-async~, ~evaluating~, ~linked~, ~linking~, ~unlinked~];
  TopLevelCapability: Record[PromiseCapabilityRecord] | Enum[~empty~];
}

type DeclarativeEnvironmentRecord extends EnvironmentRecord {
  def CreateImmutableBinding = Record[DeclarativeEnvironmentRecord].CreateImmutableBinding;
  def CreateMutableBinding = Record[DeclarativeEnvironmentRecord].CreateMutableBinding;
  def DeleteBinding = Record[DeclarativeEnvironmentRecord].DeleteBinding;
  def GetBindingValue = Record[DeclarativeEnvironmentRecord].GetBindingValue;
  def HasBinding = Record[DeclarativeEnvironmentRecord].HasBinding;
  def HasSuperBinding = Record[DeclarativeEnvironmentRecord].HasSuperBinding;
  def HasThisBinding = Record[DeclarativeEnvironmentRecord].HasThisBinding;
  def InitializeBinding = Record[DeclarativeEnvironmentRecord].InitializeBinding;
  def SetMutableBinding = Record[DeclarativeEnvironmentRecord].SetMutableBinding;
  def WithBaseObject = Record[DeclarativeEnvironmentRecord].WithBaseObject;
}

type ECMAScriptFunctionObject extends Constructor {
  def Call = Record[ECMAScriptFunctionObject].Call;
  def Construct? = Record[ECMAScriptFunctionObject].Construct;
  ClassFieldInitializerName: Record[PrivateName | Symbol] | Enum[~empty~] | String;
  ConstructorKind: Enum[~base~, ~derived~];
  ECMAScriptCode: Ast;
  Environment: Record[EnvironmentRecord];
  Fields: List[Record[ClassFieldDefinitionRecord]];
  FormalParameters: Ast;
  HomeObject: Record[Object] | Undefined;
  IsClassConstructor: Boolean;
  PrivateEnvironment: Record[PrivateEnvironmentRecord] | Null;
  PrivateMethods: List[Record[PrivateElement]];
  Realm: Record[RealmRecord];
  ScriptOrModule: Record[ModuleRecord | ScriptRecord] | Null;
  SourceText: String;
  Strict: Boolean;
  ThisMode: Enum[~global~, ~lexical~, ~strict~];
}

type EnvironmentRecord {
  Map: Map[String |-> Record[Binding]];
  OuterEnv: Record[EnvironmentRecord] | Null;
}

type ErrorInstance extends OrdinaryObject {
  ErrorData: Undefined;
}

type ExecutionContext {
  Function: Record[FunctionObject] | Null;
  Generator: Record[Object];
  LexicalEnvironment: Record[EnvironmentRecord];
  PrivateEnvironment: Record[PrivateEnvironmentRecord] | Null;
  Realm: Record[RealmRecord];
  ScriptOrModule: Record[ModuleRecord | ScriptRecord] | Null;
  VariableEnvironment: Record[EnvironmentRecord];
}

type ExportEntryRecord {
  ExportName: String | Null;
  ImportName: Enum[~all-but-default~, ~all~] | String | Null;
  LocalName: String | Null;
  ModuleRequest: String | Null;
}

type ForInIteratorInstance extends OrdinaryObject {
  Object: Record[Object];
  ObjectWasVisited: Boolean;
  RemainingKeys: List[String];
  VisitedKeys: List[String];
}

type FunctionEnvironmentRecord extends DeclarativeEnvironmentRecord {
  def BindThisValue = Record[FunctionEnvironmentRecord].BindThisValue;
  def GetSuperBase = Record[FunctionEnvironmentRecord].GetSuperBase;
  def GetThisBinding = Record[FunctionEnvironmentRecord].GetThisBinding;
  def HasSuperBinding = Record[FunctionEnvironmentRecord].HasSuperBinding;
  def HasThisBinding = Record[FunctionEnvironmentRecord].HasThisBinding;
  FunctionObject: Record[FunctionObject];
  NewTarget: Record[Object] | Undefined;
  ThisBindingStatus: Enum[~initialized~, ~lexical~, ~uninitialized~];
  ThisValue: ESValue;
}

type FunctionObject extends OrdinaryObject

type GeneratorInstance extends OrdinaryObject {
  GeneratorBrand: Enum[~empty~] | String;
  GeneratorContext: Record[ExecutionContext];
  GeneratorState: Enum[~completed~, ~executing~, ~suspendedStart~, ~suspendedYield~] | Undefined;
}

type GlobalEnvironmentRecord extends EnvironmentRecord {
  def CanDeclareGlobalFunction = Record[GlobalEnvironmentRecord].CanDeclareGlobalFunction;
  def CanDeclareGlobalVar = Record[GlobalEnvironmentRecord].CanDeclareGlobalVar;
  def CreateGlobalFunctionBinding = Record[GlobalEnvironmentRecord].CreateGlobalFunctionBinding;
  def CreateGlobalVarBinding = Record[GlobalEnvironmentRecord].CreateGlobalVarBinding;
  def CreateImmutableBinding = Record[GlobalEnvironmentRecord].CreateImmutableBinding;
  def CreateMutableBinding = Record[GlobalEnvironmentRecord].CreateMutableBinding;
  def DeleteBinding = Record[GlobalEnvironmentRecord].DeleteBinding;
  def GetBindingValue = Record[GlobalEnvironmentRecord].GetBindingValue;
  def GetThisBinding = Record[GlobalEnvironmentRecord].GetThisBinding;
  def HasBinding = Record[GlobalEnvironmentRecord].HasBinding;
  def HasLexicalDeclaration = Record[GlobalEnvironmentRecord].HasLexicalDeclaration;
  def HasRestrictedGlobalProperty = Record[GlobalEnvironmentRecord].HasRestrictedGlobalProperty;
  def HasSuperBinding = Record[GlobalEnvironmentRecord].HasSuperBinding;
  def HasThisBinding = Record[GlobalEnvironmentRecord].HasThisBinding;
  def HasVarDeclaration = Record[GlobalEnvironmentRecord].HasVarDeclaration;
  def InitializeBinding = Record[GlobalEnvironmentRecord].InitializeBinding;
  def SetMutableBinding = Record[GlobalEnvironmentRecord].SetMutableBinding;
  def WithBaseObject = Record[GlobalEnvironmentRecord].WithBaseObject;
  DeclarativeRecord: Record[DeclarativeEnvironmentRecord];
  GlobalThisValue: Record[Object];
  ObjectRecord: Record[ObjectEnvironmentRecord];
  VarNames: List[String];
}

type GlobalSymbolRegistryRecord {
  Key: String;
  Symbol: Record[Symbol];
}

type ImmutableBinding extends Binding {
  strict: Boolean;
  mutable: False;
}

type ImmutablePrototypeExoticObject extends Object {
  def SetPrototypeOf = Record[ImmutablePrototypeExoticObject].SetPrototypeOf;
}

type ImportEntryRecord {
  ImportName: Enum[~namespace-object~] | String;
  LocalName: String;
  ModuleRequest: String;
}

type IntegerIndexedExoticObject extends Object {
  def DefineOwnProperty = Record[IntegerIndexedExoticObject].DefineOwnProperty;
  def Delete = Record[IntegerIndexedExoticObject].Delete;
  def Get = Record[IntegerIndexedExoticObject].Get;
  def GetOwnProperty = Record[IntegerIndexedExoticObject].GetOwnProperty;
  def HasProperty = Record[IntegerIndexedExoticObject].HasProperty;
  def OwnPropertyKeys = Record[IntegerIndexedExoticObject].OwnPropertyKeys;
  def Set = Record[IntegerIndexedExoticObject].Set;
  ArrayLength: NonNegInt;
  ByteOffset: NonNegInt;
  ContentType: Enum[~BigInt~, ~Number~];
  TypedArrayName: String;
  ViewedArrayBuffer: Record[ArrayBufferObject];
}

type Intrinsics

type IteratorRecord {
  Done: Boolean;
  Iterator: Record[OrdinaryObject];
  NextMethod: Record[FunctionObject];
}

type JobCallbackRecord {
  Callback: Record[FunctionObject];
  HostDefined: Enum[~empty~];
}

type MapInstance extends OrdinaryObject {
  MapData: List[Record[{ Key: ESValue | Enum[~empty~], Value: ESValue }]];
}

type MatchRecord {
  EndIndex: Int;
  StartIndex: Int;
}

type ModuleEnvironmentRecord extends DeclarativeEnvironmentRecord {
  def CreateImportBinding = Record[ModuleEnvironmentRecord].CreateImportBinding;
  def GetBindingValue = Record[ModuleEnvironmentRecord].GetBindingValue;
  def GetThisBinding = Record[ModuleEnvironmentRecord].GetThisBinding;
  def HasThisBinding = Record[ModuleEnvironmentRecord].HasThisBinding;
}

type ModuleNamespaceExoticObject extends Object {
  def DefineOwnProperty = Record[ModuleNamespaceExoticObject].DefineOwnProperty;
  def Delete = Record[ModuleNamespaceExoticObject].Delete;
  def Get = Record[ModuleNamespaceExoticObject].Get;
  def GetOwnProperty = Record[ModuleNamespaceExoticObject].GetOwnProperty;
  def GetPrototypeOf = Record[ModuleNamespaceExoticObject].GetPrototypeOf;
  def HasProperty = Record[ModuleNamespaceExoticObject].HasProperty;
  def IsExtensible = Record[ModuleNamespaceExoticObject].IsExtensible;
  def OwnPropertyKeys = Record[ModuleNamespaceExoticObject].OwnPropertyKeys;
  def PreventExtensions = Record[ModuleNamespaceExoticObject].PreventExtensions;
  def Set = Record[ModuleNamespaceExoticObject].Set;
  def SetPrototypeOf = Record[ModuleNamespaceExoticObject].SetPrototypeOf;
  Exports: List[String];
  Module: Record[ModuleRecord];
}

type ModuleRecord {
  Environment: Record[ModuleEnvironmentRecord] | Enum[~empty~];
  HostDefined: Undefined;
  Namespace: Record[ModuleNamespaceExoticObject] | Enum[~empty~];
  Realm: Record[RealmRecord];
}

type MutableBinding extends Binding {
  mutable: True;
}

type NumberObject extends OrdinaryObject {
  NumberData: Number;
}

type Object {
  def DefineOwnProperty = Record[OrdinaryObject].DefineOwnProperty;
  def Delete = Record[OrdinaryObject].Delete;
  def Get = Record[OrdinaryObject].Get;
  def GetOwnProperty = Record[OrdinaryObject].GetOwnProperty;
  def GetPrototypeOf = Record[OrdinaryObject].GetPrototypeOf;
  def HasProperty = Record[OrdinaryObject].HasProperty;
  def IsExtensible = Record[OrdinaryObject].IsExtensible;
  def OwnPropertyKeys = Record[OrdinaryObject].OwnPropertyKeys;
  def PreventExtensions = Record[OrdinaryObject].PreventExtensions;
  def Set = Record[OrdinaryObject].Set;
  def SetPrototypeOf = Record[OrdinaryObject].SetPrototypeOf;
  Extensible: Boolean;
  Map: Map[Record[Symbol] | String |-> Record[PropertyDescriptor]];
  PrivateElements: List[Record[PrivateElement]];
  Prototype: Record[Object] | Null;
}

type ObjectEnvironmentRecord extends EnvironmentRecord {
  def CreateMutableBinding = Record[ObjectEnvironmentRecord].CreateMutableBinding;
  def DeleteBinding = Record[ObjectEnvironmentRecord].DeleteBinding;
  def GetBindingValue = Record[ObjectEnvironmentRecord].GetBindingValue;
  def HasBinding = Record[ObjectEnvironmentRecord].HasBinding;
  def HasSuperBinding = Record[ObjectEnvironmentRecord].HasSuperBinding;
  def HasThisBinding = Record[ObjectEnvironmentRecord].HasThisBinding;
  def InitializeBinding = Record[ObjectEnvironmentRecord].InitializeBinding;
  def SetMutableBinding = Record[ObjectEnvironmentRecord].SetMutableBinding;
  def WithBaseObject = Record[ObjectEnvironmentRecord].WithBaseObject;
  BindingObject: Record[Object];
  IsWithEnvironment: Boolean;
}

type OrdinaryObject extends Object

type PendingJob {
  def Job;
  Realm: Record[RealmRecord];
  ScriptOrModule: Record[ModuleRecord | ScriptRecord] | Null;
}

type PrivateElement {
  Key: Record[PrivateName];
  Kind: Enum[~field~, ~method~, ~accessor~];
  Value?: ESValue;
  Get?: Record[FunctionObject] | Undefined;
  Set?: Record[FunctionObject] | Undefined;
}

type PrivateEnvironmentRecord {
  Names: List[Record[PrivateName]];
  OuterPrivateEnvironment: Record[PrivateEnvironmentRecord] | Null;
}

type PrivateName {
  Description: String;
}

type Promise extends OrdinaryObject {
  PromiseFulfillReactions: List[Record[PromiseReaction]];
  PromiseIsHandled: Boolean;
  PromiseRejectReactions: List[Record[PromiseReaction]];
  PromiseResult: ESValue;
  PromiseState: Enum[~fulfilled~, ~pending~, ~rejected~];
}

type PromiseCapabilityRecord {
  Promise: Record[Promise];
  Reject: Record[FunctionObject];
  Resolve: Record[FunctionObject];
}

type PromiseReaction {
  Capability: Record[PromiseCapabilityRecord] | Undefined;
  Handler: Record[JobCallbackRecord] | Enum[~empty~];
  Type: Enum[~Fulfill~, ~Reject~];
}

type PropertyDescriptor {
  Value?: ESValue;
  Writable?: Boolean;
  Get?: Record[Object] | Undefined;
  Set?: Record[Object] | Undefined;
  Enumerable: Boolean;
  Configurable: Boolean;
}

type ProxyExoticObject extends Constructor {
  def Call = Record[ProxyExoticObject].Call;
  def Construct = Record[ProxyExoticObject].Construct;
  def DefineOwnProperty = Record[ProxyExoticObject].DefineOwnProperty;
  def Delete = Record[ProxyExoticObject].Delete;
  def Get = Record[ProxyExoticObject].Get;
  def GetOwnProperty = Record[ProxyExoticObject].GetOwnProperty;
  def GetPrototypeOf = Record[ProxyExoticObject].GetPrototypeOf;
  def HasProperty = Record[ProxyExoticObject].HasProperty;
  def IsExtensible = Record[ProxyExoticObject].IsExtensible;
  def OwnPropertyKeys = Record[ProxyExoticObject].OwnPropertyKeys;
  def PreventExtensions = Record[ProxyExoticObject].PreventExtensions;
  def Set = Record[ProxyExoticObject].Set;
  def SetPrototypeOf = Record[ProxyExoticObject].SetPrototypeOf;
  ProxyHandler: Record[Object] | Null;
  ProxyTarget: Record[Object] | Null;
}

type RealmRecord {
  GlobalEnv: Record[GlobalEnvironmentRecord];
  GlobalObject: Record[Object] | Undefined;
  HostDefined: Undefined;
  Intrinsics: Record[Intrinsics];
  TemplateMap: List[Record[TemplatePair]];
}

type ReferenceRecord {
  Base: ESValue | Record[EnvironmentRecord] | Enum[~unresolvable~];
  ReferencedName: Record[PrivateName | Symbol] | String;
  Strict: Boolean;
  ThisValue: ESValue | Enum[~empty~];
}

type RegExpObject extends Object {
  def RegExpMatcher;
}

type ResolvedBindingRecord {
  BindingName: Enum[~NAMESPACE~] | String;
  Module: Record[ModuleRecord];
}

type ScriptRecord {
  ECMAScriptCode: Ast[Script];
  HostDefined: Enum[~empty~];
  Realm: Record[RealmRecord] | Undefined;
}

type SetInstance extends OrdinaryObject {
  SetData: List[ESValue];
}

type SourceTextModuleRecord extends CyclicModuleRecord {
  def ExecuteModule = SourceTextModuleRecord.ExecuteModule;
  def GetExportedNames = SourceTextModuleRecord.GetExportedNames;
  def InitializeEnvironment = SourceTextModuleRecord.InitializeEnvironment;
  def ResolveExport = SourceTextModuleRecord.ResolveExport;
  Context: Record[ExecutionContext];
  ECMAScriptCode: Ast[Module];
  ImportEntries: List[Record[ImportEntryRecord]];
  ImportMeta: Record[Object] | Enum[~empty~];
  IndirectExportEntries: List[Record[ExportEntryRecord]];
  LocalExportEntries: List[Record[ExportEntryRecord]];
  StarExportEntries: List[Record[ExportEntryRecord]];
}

type StringExoticObject extends Object {
  def DefineOwnProperty = Record[StringExoticObject].DefineOwnProperty;
  def GetOwnProperty = Record[StringExoticObject].GetOwnProperty;
  def OwnPropertyKeys = Record[StringExoticObject].OwnPropertyKeys;
  StringData: String;
}

type Symbol {
  Description: String | Undefined;
}

type SymbolObject extends OrdinaryObject {
  SymbolData: Record[Symbol];
}

type TemplatePair {
  Array: Record[ArrayExoticObject];
  Site: Ast[TemplateLiteral];
}

type WeakMapInstance extends OrdinaryObject {
  WeakMapData: List[Record[{ Key: ESValue | Enum[~empty~], Value: ESValue }]];
}

type WeakSetInstance extends OrdinaryObject {
  WeakSetData: List[ESValue];
}
